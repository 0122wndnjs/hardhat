import { CompilersList } from "@nomiclabs/buidler/internal/solidity/compiler/downloader";
import { BuidlerPluginError } from "@nomiclabs/buidler/plugins";

import { pluginName } from "../pluginContext";

const COMPILERS_LIST_URL =
  "https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/list.json";

export class SolcVersionNumber {
  constructor(
    readonly major: number,
    readonly minor: number,
    readonly patch: number
  ) {}
  public async getLongVersion(): Promise<string> {
    const shortVersion = `${this.major}.${this.minor}.${this.patch}`;
    const versions = await getVersions();
    const fullVersion = versions.releases[shortVersion];

    if (fullVersion === undefined || fullVersion === "") {
      throw new BuidlerPluginError(
        pluginName,
        "Given solc version doesn't exist"
      );
    }

    return fullVersion.replace(/(soljson-)(.*)(.js)/, "$2");
  }
}

export enum InferralType {
  EXACT,
  METADATA_PRESENT_VERSION_ABSENT,
  METADATA_ABSENT,
}

// Perhaps an enumeration of the versions included in this range could be a better solution for error messages.
interface SolcVersionRange {
  inferralType: InferralType;
  /**
   * @returns true if the version is included in the range.
   */
  isIncluded(version: SolcVersionNumber): boolean;
  toString(): string;
}

export function getVersionNumber(shortVersion: string): SolcVersionNumber {
  const [major, minor, patch] = shortVersion
    .split(".", 2)
    .map((value) => parseInt(value, 10));
  return new SolcVersionNumber(major, minor, patch);
}

export async function inferSolcVersion(
  bytecode: Buffer
): Promise<SolcVersionRange> {
  const {
    readSolcVersion,
    VersionNotFoundError,
    MetadataAbsentError,
  } = await import("./metadata");

  let solcVersionMetadata: SolcVersionNumber;
  try {
    solcVersionMetadata = await readSolcVersion(bytecode);
  } catch (error) {
    // We want to provide our best inference here.
    // We can infer that some solidity compiler releases couldn't have produced this bytecode.
    // Solc v0.4.7 was the first compiler to introduce metadata into the generated bytecode.
    // See https://solidity.readthedocs.io/en/v0.4.7/miscellaneous.html#contract-metadata
    // Solc v0.4.26, the last release for the v0.4 series, does not feature the compiler version in its emitted metadata.
    // See https://solidity.readthedocs.io/en/v0.4.26/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
    // Solc v0.5.9 was the first compiler to introduce its version into the metadata.
    // See https://solidity.readthedocs.io/en/v0.5.9/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
    // Solc v0.6.0 features compiler version metadata.
    // See https://solidity.readthedocs.io/en/v0.6.0/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
    if (error instanceof VersionNotFoundError) {
      // The embedded metadata was successfully decoded but there was no solc version in it.
      return {
        isIncluded: (version: SolcVersionNumber): boolean => {
          return (
            version.major === 0 &&
            ((version.minor === 4 && version.patch >= 7) ||
              (version.minor === 5 && version.patch < 9))
          );
        },
        inferralType: InferralType.METADATA_PRESENT_VERSION_ABSENT,
        toString: () => {
          return `v0.4.7 or v0.4 with a higher patch number; v0.5.8 or v0.5 with a lower patch number`;
        },
      };
    }
    if (error instanceof MetadataAbsentError) {
      // The decoding failed. Unfortunately, our only option is to assume that this bytecode was emitted by an old version.
      return {
        isIncluded: (version: SolcVersionNumber): boolean => {
          return (
            version.major === 0 && version.minor === 4 && version.patch < 7
          );
        },
        inferralType: InferralType.METADATA_ABSENT,
        toString: () => {
          return `v0.4.6 or v0.4 with a lower patch number`;
        },
      };
    }
    // Should be unreachable.
    throw error;
  }

  return {
    isIncluded: (version: SolcVersionNumber): boolean => {
      return (
        version.major === solcVersionMetadata.major &&
        version.minor === solcVersionMetadata.minor &&
        version.patch === solcVersionMetadata.patch
      );
    },
    inferralType: InferralType.EXACT,
    toString: () => {
      return `v{solcVersionMetadata.major}.{solcVersionMetadata.minor}.{solcVersionMetadata.patch}`;
    },
  };
}

export async function getVersions(): Promise<CompilersList> {
  try {
    const { default: fetch } = await import("node-fetch");
    // It would be better to query an etherscan API to get this list but there's no such API yet.
    const compilersURL = new URL(COMPILERS_LIST_URL);
    const response = await fetch(compilersURL);

    if (!response.ok) {
      throw new BuidlerPluginError(
        pluginName,
        `Response is not ok. Status code: ${response.status}`
      );
    }

    return response.json();
  } catch (error) {
    throw new BuidlerPluginError(
      pluginName,
      `Failed to obtain list of solc versions. Reason: ${error.message}`,
      error
    );
  }
}
